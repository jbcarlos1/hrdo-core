datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    USER
    APPROVER
    ADMIN
}

enum Division {
    MANAGEMENT
    RECRUITMENT
    PLANNING_RESEARCH
    DEVELOPMENT_BENEFITS
}

enum Section {
    EXECUTIVE
    ADMINISTRATIVE
    RECRUITMENT_SELECTION
    APPOINTMENT
    PLANNING_RESEARCH
    MONITORING_EVALUATION
    INFORMATION_MANAGEMENT
    PROJECTS
    SCHOLARSHIP
    TRAINING
    BENEFITS
}

enum Status {
    OUT_OF_STOCK
    FOR_REORDER
    AVAILABLE
    PHASED_OUT
    DISCONTINUED
}

enum RequestStatus {
    PENDING
    APPROVED
    REJECTED
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    password      String?
    role          UserRole  @default(USER)
    division      Division  @default(MANAGEMENT)
    section       Section   @default(ADMINISTRATIVE)
    isApproved    Boolean   @default(false)

    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?

    @@map("users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Item {
    id           String        @id @default(cuid())
    name         String
    quantity     Int
    unit         String
    reorderPoint Int
    status       Status
    location     String
    image        String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    isArchived   Boolean       @default(false)
    RequestItem  RequestItem[]
}

model Unit {
    id   String @id @default(cuid())
    name String @unique
}

model Location {
    id   String @id @default(cuid())
    name String @unique
}

model Request {
    id          String        @id @default(cuid())
    user        String
    email       String        
    division    Division
    section     Section
    status      RequestStatus @default(PENDING)
    items       RequestItem[]
    isSupplyIn  Boolean       @default(false)
    additionalNotes String?
    approver   String?
    isReceived  Boolean       @default(false)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

model RequestItem {
    id        String  @id @default(cuid())
    request   Request @relation(fields: [requestId], references: [id])
    requestId String
    item      Item    @relation(fields: [itemId], references: [id])
    itemId    String
    quantity  Int
}
